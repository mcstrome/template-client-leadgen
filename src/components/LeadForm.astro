---
import { useState } from 'preact/hooks';
import type { JSX } from 'preact';

interface FormData {
  name: string;
  email: string;
  phone: string;
  message: string;
  source?: string;
}

const defaultFormData: FormData = {
  name: '',
  email: '',
  phone: '',
  message: '',
  source: 'website',
};

const [formData, setFormData] = useState<FormData>({ ...defaultFormData });
const [isSubmitting, setIsSubmitting] = useState(false);
const [submitStatus, setSubmitStatus] = useState<{
  success: boolean;
  message: string;
} | null>(null);

const handleChange = (e: JSX.TargetedEvent<HTMLInputElement | HTMLTextAreaElement>) => {
  const { name, value } = e.currentTarget;
  setFormData(prev => ({
    ...prev,
    [name]: value,
  }));
};

const handleSubmit = async (e: Event) => {
  e.preventDefault();
  setIsSubmitting(true);
  setSubmitStatus(null);

  try {
    const response = await fetch('/api/submit', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        ...formData,
        source: window.location.href,
      }),
    });

    const result = await response.json();

    if (response.ok) {
      setSubmitStatus({
        success: true,
        message: 'Thank you for your submission! We will get back to you soon.',
      });
      setFormData({ ...defaultFormData });
    } else {
      throw new Error(result.message || 'Failed to submit form');
    }
  } catch (error) {
    console.error('Form submission error:', error);
    setSubmitStatus({
      success: false,
      message: 'There was an error submitting your form. Please try again later.',
    });
  } finally {
    setIsSubmitting(false);
  }
};
--->

<div class="max-w-2xl mx-auto p-6 bg-white rounded-lg shadow-md">
  {submitStatus ? (
    <div class={`p-4 mb-6 rounded ${
      submitStatus.success ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
    }`}>
      {submitStatus.message}
    </div>
  ) : null}

  <form id="leadForm" onSubmit={handleSubmit} class="space-y-6">
    <div>
      <label for="name" class="block text-sm font-medium text-gray-700 mb-1">
        Name <span class="text-red-500">*</span>
      </label>
      <input
        type="text"
        id="name"
        name="name"
        value={formData.name}
        onInput={handleChange}
        required
        class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
      />
    </div>

    <div>
      <label for="email" class="block text-sm font-medium text-gray-700 mb-1">
        Email <span class="text-red-500">*</span>
      </label>
      <input
        type="email"
        id="email"
        name="email"
        value={formData.email}
        onInput={handleChange}
        required
        class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
      />
    </div>

    <div>
      <label for="phone" class="block text-sm font-medium text-gray-700 mb-1">
        Phone (optional)
      </label>
      <input
        type="tel"
        id="phone"
        name="phone"
        value={formData.phone}
        onInput={handleChange}
        class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
      />
    </div>

    <div>
      <label for="message" class="block text-sm font-medium text-gray-700 mb-1">
        Message <span class="text-red-500">*</span>
      </label>
      <textarea
        id="message"
        name="message"
        rows={4}
        value={formData.message}
        onInput={handleChange}
        required
        class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
      ></textarea>
    </div>

    <div class="pt-2">
      <button
        type="submit"
        disabled={isSubmitting}
        class={`w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white ${
          isSubmitting
            ? 'bg-blue-400 cursor-not-allowed'
            : 'bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500'
        }`}
      >
        {isSubmitting ? 'Submitting...' : 'Submit'}
      </button>
    </div>
  </form>
</div>

<script>
  import { useState } from 'preact/hooks';

  const form = document.getElementById('leadForm');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState(null);

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setSubmitStatus(null);

    const formData = new FormData(e.target);
    const data = Object.fromEntries(formData.entries());

    try {
      const response = await fetch('/api/submit', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...data,
          source: window.location.href,
        }),
      });

      const result = await response.json();

      if (response.ok) {
        setSubmitStatus({
          success: true,
          message: 'Thank you for your submission! We will get back to you soon.',
        });
        form.reset();
      } else {
        throw new Error(result.message || 'Failed to submit form');
      }
    } catch (error) {
      console.error('Form submission error:', error);
      setSubmitStatus({
        success: false,
        message: 'There was an error submitting your form. Please try again later.',
      });
    } finally {
      setIsSubmitting(false);
    }
  });
</script>

<style>
  /* Add any custom styles here */
</style>
